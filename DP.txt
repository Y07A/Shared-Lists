DP scripts:

// Network Bridge

public static void PlaceObject(string res, Vector3 origin, Vector3 position, Vector3 rotation, uint parentId = uint(0)) {
	instance.cmdPlaceObject(res, origin, position, rotation, parentId);
}

[Command]
public void cmdPlaceObject(string res, Vector3 origin, Vector3 position, Vector3 rotation, uint parentId) {
	if ((Resources.Load(res) as GameObject).GetComponent<NetworkIdentity>() != null){
		GameObject g = Instantiate(Resources.Load(res) as GameObject, FloatingOrigin.Invert(origin)+position, rotation);
		NetworkServer.Spawn(g);
		return;
	}
	rpcPlaceObject(res, origin, position, rotation, parentId);
}

[ClientRpc]
public void rpcPlaceObject(string res, Vector3 origin, Vector3 position, Vector3 rotation, uint parentId) {
	GameObject g = Instantiate(Resources.Load(res) as GameObject, FloatingOrigin.Invert(origin)+position, rotation);
	if (parentId != uint(0) && NetworkIdentity.spawned.ContainsKey(parentId)) {
		g.transform.parent = NetworkIdentity.spawned[parentId].transform;
	} else {
		g.tag = "Root";
	}
}

public static void InteractOn(string id, string args) {
	instance.cmdInteractOn(id, args);
}

[Command]
public void cmdInteractOn(string id, string args) {
	rpcInteractOn(id, args);
}

[ClientRpc]
public void rpcInteractOn(string id, string args) {
	if (!Interactable.all.ContainsKey(id))
		return;
	Interactable.all[id].InteractNetwork(args);
}


// Item Placer

public Renderer model;
public Material previewMaterial;

public string resourcePath = "Objects/";

private Transform preview;

private void OnEnable()
{
	preview = Instantiate(model.gameObject).transform;
	Material[] mats = new Material[model.materials.Length];
	for(int i = 0; i < mats.Length; i++) {
		mats[i] = previewMaterial;
	}
	preview.GetComponent<Renderer>().materials = mats;
	StartCoroutine(Previewing());
}

private void OnDisable()
{
	if (preview != null)
		Destroy(preview.gameObject);
	StopAllCoroutines();
}

private uint parentId;
private IEnumerator Previewing()
{
	RaycastHit hit;
	Transform cam = Player.GetPlayer().GetComponent<View>().head;
	float step = 1f/30f;
	while (true) {
		if (Physics.Raycast(cam.position, cam.forward, out hit, 3f)) {
			preview.position = hit.point;
		} else{
			preview.position = cam.position+cam.forward*3f;
		}
		preview.rotation = Player.GetPlayer().rotation*Quaternion.Euler(0, 180, 0);
		yield return new WaitForSeconds(step);
	}
}

private void Update()
{
	if (/*click down*/) {
		Place();
	}
}

private void Place()
{
	//Remove from Inventory
	
	NetworkBridge.PlaceObject(res, FloatingOrigin.GetOrigin(), 
}



// Object Placer : NOT READY

public static Dictionary<Vector3,string> objects = new Dictionary<Vector3,string>();

private void OnEnable()
{
	StartCoroutine(Check());
}

private void OnDisable()
{
	StopAllCoroutines();
}


private void Place(string res, Vector3 origin, Vector3 position, Vector3 rotation, uint parentId) {
	
}


// Tank Pipe : Interactable

public override void Interact()
{
	AttachToPlayer(Player.GetPlayer().gameObject);
	NetworkBridge.InteractNetwork(Player.GetPlayer().GetComponent<NetworkIdentity>().netId.ToString());
}

public override void InteractNetwork(string args)
{
	uint pid = uint.Parse(args);
	if (pid == Player.GetPlayer().GetComponent<NetworkIdentity>().netId)
		return;
	AttachToPlayer(PlayerMultiplayer.players[pid].gameObject);
}

private void AttachToPlayer(GameObject player) {
	
}


// Interactable


public string id;
public static Dictionary<string,Interactable> all = new Dictionary<string,Interactable>();
protected string fullId;

private void Start()
{
	fullId = transform.root.gameObject.GetComponent<NetworkIdentity>().netId;
	if (!all.ContainsKey(fullId))
		all.Add(fullId, this);
}

private void OnDestroy()
{
	if (all.ContainsKey(fullId))
		all.Remove(fullId);
}

public virtual void InteractNetwork(string args)
{
	//Yeepee
}


// ObjectHandle : Interactable

public override void Interact()
{
	Handle(Player.GetPlayer().gameObject);
	NetworkBridge.InteractOn(fullId, Player.GetPlayer().GetComponent<NetworkIdentity>().netId+":"+
}

public override void InteractNetwork(string args)
{
	uint pid = uint.Parse(args);
	if (pid == Player.GetPlayer().GetComponent<NetworkIdentity>().netId)
		return;
	Handle(PlayerMultiplayer.players[pid].gameObject);
}


// TODO

Remove adding instance to dictionary in OnEnable(), and removing it in OnDisable(),
instead put it in Start() and remove it in OnDestroy().